TARGET ?= DISCO_F429ZI

.DEFAULT_GOAL := all
.PHONE: PLATFORM_FLAGS

APP ?= mongoose-iot
APP_MODULES ?=
APP_PLATFORM = stm32
APP_EXTRA_SRCS ?=
APP_FS_PATH ?=

MIOT_ENABLE_ATCA_SERVICE = 0
MIOT_ENABLE_JS = 0
MIOT_ENABLE_UPDATER = 0
MIOT_ENABLE_UPDATER_POST = 0
MIOT_ENABLE_UPDATER_RPC = 0
MIOT_ENABLE_ATCA = 0
MIOT_ENABLE_MDNS = 0
MIOT_ENABLE_DNS_SD = 0
MIOT_ENABLE_CONSOLE = 0

CREATE_SPIFFS_FS ?= 1

BUILD_DIR ?= $(CURDIR)/.build
FW_DIR ?= $(CURDIR)/firmware
GEN_DIR ?= $(BUILD_DIR)/gen
MBED_PATH ?= /opt/mbed-lib
MIOT_PATH ?= ../../..
COMMON_PATH ?= $(MIOT_PATH)/common
MONGOOSE_PATH ?= $(MIOT_PATH)/mongoose
FROZEN_PATH ?= $(MIOT_PATH)/frozen
V7_PATH ?= $(MIOT_PATH)/v7
MIOT_SRC_PATH ?= $(MIOT_PATH)/fw/src
BUILD_INFO_O = $(BUILD_DIR)/build_info.o
MG_BUILD_INFO_O = $(BUILD_DIR)/mg_build_info.o
PLATFORM_SRC_PATH = $(MIOT_PATH)/fw/platforms/stm32
SIMPLE_LINK_PATH = $(PLATFORM_SRC_PATH)/simplelink
STM32LIB = libmbed-lib.a
SYS_CONFIG_C = $(GEN_DIR)/sys_config.c
SYS_CONFIG_DEFAULTS_JSON = $(GEN_DIR)/sys_config_defaults.json
SYS_CONFIG_SCHEMA_JSON = $(GEN_DIR)/sys_config_schema.json
SYS_RO_VARS_C = $(GEN_DIR)/sys_ro_vars.c
SYS_RO_VARS_SCHEMA_JSON = $(GEN_DIR)/sys_ro_vars_schema.json
BUILD_INFO_C = $(GEN_DIR)/build_info.c
BUILD_INFO_JSON = $(GEN_DIR)/build_info.json
MG_BUILD_INFO_C = $(GEN_DIR)/mg_build_info.c
ELF_FILE = $(BUILD_DIR)/$(APP).elf
FW_STAGING_DIR = $(BUILD_DIR)/fw_temp
FW_MANIFEST = $(FW_STAGING_DIR)/manifest.json
FW_PARTS = boot:src=$(FW_FILE),addr=0
FW_FILE = $(FW_STAGING_DIR)/$(APP).bin
SPIFFS_PATH ?= $(COMMON_PATH)/spiffs
COMMON_FS_PATH ?= $(MIOT_PATH)/fw/skeleton/fs
FS_IMG = ?
# 256K is minimum size, because sector size is 128K and we need at least two
FS_SIZE = 262144
FS_HEADER=$(GEN_DIR)/fs_data.h
FS_STAGING_DIR = $(BUILD_DIR)/fs
# Let's have FS in sectors 6 & 7 (seems all STM boards have 7 sectors)
FS_ATTRIBUTES = '__attribute__((section(".rodata.__at_0x08040000"))) __attribute__ ((aligned (131072)))'
GENFILES_FLAG = $(BUILD_DIR)/genfiles.done
GENFILES_LIST = $(SYS_CONFIG_C) $(SYS_RO_VARS_C) $(BUILD_INFO_C) $(MG_BUILD_INFO_C) $(FS_HEADER)
PLATFORM_MAKE_FILE = $(GEN_DIR)/rules.mk
OBJCOPY ?= '/usr/bin/arm-none-eabi-objcopy'

override BUILD_DIR := $(abspath $(BUILD_DIR))
override FW_STAGING_DIR := $(abspath $(FW_STAGING_DIR))
override FW_DIR := $(abspath $(FW_DIR))
override GEN_DIR := $(abspath $(GEN_DIR))

include $(MIOT_PATH)/fw/common.mk

MIOT_SRCS = cs_rbuf.c \
            cs_file.c \
            miot_config.c \
            miot_console.c cs_frbuf.c \
            miot_gpio.c \
            miot_init.c \
            miot_timers_mongoose.c \
            miot_mongoose.c \
            miot_sys_config.c \
            $(notdir $(SYS_CONFIG_C)) $(notdir $(SYS_RO_VARS_C)) \
            $(notdir $(BUILD_INFO_C)) $(notdir $(MG_BUILD_INFO_C)) \
            miot_uart.c \
            miot_utils.c \
            cs_crc32.c \
            json_utils.c \
            mongoose.c frozen.c \
            mbed_libc.c

MIOT_SRCS += $(notdir $(foreach m, $(SPIFFS_PATH),$(wildcard $(m)/*.c)))

MBED_DEPS_SRCS = startup.cpp stm32_hal.cpp stm32_spiffs.cpp stm32_i2c.cpp \
                 stm32_gpio.cpp stm32_uart.cpp stm32_wifi.cpp

ifeq "${CREATE_SPIFFS_FS}" "1"
  FS_IMG = $(FW_STAGING_DIR)/fs.bin
endif

VPATH = $(APP_MODULES) $(COMMON_PATH) $(MIOT_SRC_PATH) $(MONGOOSE_PATH) \
        $(FROZEN_PATH) $(GEN_DIR) $(COMMON_PATH)/mg_rpc \
        $(PLATFORM_SRC_PATH)/mbed_deps \
        $(SPIFFS_PATH) $(COMMON_PATH)/platforms/mbed

IPATH += -I$(MIOT_PATH) -I$(GEN_DIR) -I$(SIMPLE_LINK_PATH)/include \
         -I$(SIMPLE_LINK_PATH) -I$(COMMON_PATH)/mg_rpc \
         -I$(SPIFFS_PATH) -I$(MIOT_PATH)/fw/platforms/stm32/ \
         -I$(MBED_PATH)/mbed-os

LIBRARY_PATHS += -L$(BUILD_DIR)

MIOT_FEATURES += -DMIOT_ENABLE_I2C_API -DCS_ENABLE_SPIFFS
MG_FEATURES = -DMG_ENABLE_FILESYSTEM

include $(MIOT_PATH)/fw/src/features.mk
include $(MIOT_PATH)/fw/src/spiffs.mk

C_CXX_FLAGS = ${MIOT_FEATURES} ${MG_FEATURES} -DMG_NET_IF=MG_NET_IF_SIMPLELINK -DFS_SIZE=${FS_SIZE} \
              -DMIOT_MAX_NUM_UARTS=2

# TODO(alashkin): Verify this
C_CXX_FLAGS += -DMIOT_NUM_GPIO=16

C_FLAGS += ${C_CXX_FLAGS}
CXX_FLAGS += ${C_CXX_FLAGS}
LD_SCRIPT ?=
LD_FLAGS ?=
LD_SYS_LIBS ?=
CC ?=
CPP ?=
LD ?=
ELF2BIN ?=

APP_SRCS := $(notdir $(foreach m,$(APP_MODULES),$(wildcard $(m)/*.c))) $(APP_EXTRA_SRCS)

MIOT_OBJS = $(addprefix $(BUILD_DIR)/,$(patsubst %.c,%.o,$(MIOT_SRCS)))
APP_OBJS = $(addprefix $(BUILD_DIR)/,$(patsubst %.c,%.o,$(APP_SRCS)))
MBED_DEPS_OBJS = $(addprefix $(BUILD_DIR)/,$(patsubst %.cpp,%.o,$(MBED_DEPS_SRCS)))

MBED_FS_FUNCS = opendir readdir closedir mkdir
MBED_WEAK_FUNCS = $(addprefix -W , $(MBED_FS_FUNCS))

include $(MIOT_PATH)/common/scripts/fw_meta.mk

all: $(BUILD_DIR) $(GEN_DIR) $(FW_STAGING_DIR) $(FW_DIR) $(BUILD_DIR)/$(STM32LIB) PLATFORM_FLAGS $(BUILD_INFO_C) $(ELF_FILE) $(FW_FILE) $(FW_MANIFEST) $(FW_ZIP)

PLATFORM_FLAGS: $(PLATFORM_MAKE_FILE)
# mbed uses "blacklist" model, i.e. it is not possible to say
# `compile this file`, it understands only `compile this directory and all its subdirectories
# but do not compile that, that and that file
# so, to use it, we have to create big-big-big .mnedignore file and list almost all files from mongoose-out
# folder in it
# it works. But with such big mbedignore compilation is extremely (EXTREMELY) slow
# Current solution: generate fake makefile for current target and parse it, to get flags, inc dirs, ld script etc
# Fortunatelly generated makefile has very simple structure
# Anyway, it is kind of temp solution
# TODO(alashkin): find something better
	$(eval IPATH += $(subst .././, $(MBED_PATH)/, $(shell cat $(PLATFORM_MAKE_FILE) | grep ^INCLUDE_PATH | awk '{print $$3}')))
	$(eval C_FLAGS += $(shell cat $(PLATFORM_MAKE_FILE) | grep ^C_FLAGS | awk '{print $$3}'))
	$(eval CXX_FLAGS += $(shell cat $(PLATFORM_MAKE_FILE) | grep ^CXX_FLAGS | awk '{print $$3}'))
	$(eval LD_SCRIPT += $(subst .././, $(MBED_PATH)/, $(shell cat $(PLATFORM_MAKE_FILE) | grep ^LINKER_SCRIPT | awk '{print $$3}')))
	$(eval $(shell cat $(PLATFORM_MAKE_FILE) | grep ^LD_FLAGS))
	$(eval LD_SYS_LIBS += $(shell cat $(PLATFORM_MAKE_FILE) | grep ^LD_SYS_LIBS | awk '{print $$3}'))
	$(eval CC=$(shell cat $(PLATFORM_MAKE_FILE) | grep ^'CC      =' | cut -c 11-))
	$(eval CPP=$(shell cat $(PLATFORM_MAKE_FILE) | grep ^'CPP     =' | cut -c 11-))
	$(eval LD=$(shell cat $(PLATFORM_MAKE_FILE) | grep ^'LD      =' | cut -c 11-))
	$(eval ELF2BIN += $(shell cat $(PLATFORM_MAKE_FILE) | grep ^ELF2BIN | awk '{print $$3}'))

$(PLATFORM_MAKE_FILE) : $(GEN_DIR) $(BUILD_DIR)/$(STM32LIB)
	$(Q) (cd $(MBED_PATH) && rm -f Makefile && mbed export -i GCC_ARM && \
        cp Makefile $(PLATFORM_MAKE_FILE))

$(BUILD_DIR)/$(STM32LIB): $(BUILD_DIR)
	$(vecho) Building mbed lib
	$(Q) (cd $(MBED_PATH) && mbed compile -m $(TARGET) -t GCC_ARM --build $(BUILD_DIR) --library)
# We have FS functions (opendir etc) implementation in mongoose
# so, just make weak mbed ones
	$(Q) $(OBJCOPY) $(BUILD_DIR)/$(STM32LIB) $(MBED_WEAK_FUNCS)

$(BUILD_DIR) $(GEN_DIR) $(FW_STAGING_DIR) $(FW_DIR):
	$(vecho) "MKDIR $@"
	$(Q) mkdir -p $@

$(BUILD_DIR)/%.o: %.c $(BUILD_DIR) $(GENFILES_FLAG) PLATFORM_FLAGS
	$(vecho) CC $(notdir $<)
	$(Q) $(CC) $(C_FLAGS) $(IPATH) -o $@ $<

$(BUILD_DIR)/%.o: %.cpp $(BUILD_DIR) $(GENFILES_FLAG) PLATFORM_FLAGS
	$(vecho) CPP $(notdir $<)
	$(Q) $(CPP) $(CXX_FLAGS) $(IPATH) -o $@ $<

$(BUILD_DIR)/%.o: $(GEN_DIR)/%.c $(BUILD_DIR) $(GEN_DIR) PLATFORM_FLAGS
	$(vecho) CC $(notdir $<)
	$(Q) $(CC) $(C_FLAGS) $(IPATH) -o $@ $<

$(GENFILES_FLAG): $(GENFILES_LIST)
	$(Q) touch $@

include $(MIOT_PATH)/common/scripts/build_info.mk
include $(MIOT_PATH)/fw/src/sys_config.mk

$(BUILD_INFO_C) $(BUILD_INFO_JSON): $(GEN_DIR)
	$(call gen_build_info,$@,,$(APP_BUILD_ID),$(APP_VERSION),,$(BUILD_INFO_C),$(BUILD_INFO_JSON))

$(MG_BUILD_INFO_C): $(GEN_DIR)
	$(call gen_build_info,$@,$(MIOT_PATH)/fw,,,mg_,$(MG_BUILD_INFO_C),)

-include $(wildcard $(BUILD_DIR)/*.d)

$(FS_IMG): $(APP_FS_PATH) $(COMMON_FS_PATH) $(FS_FILES) $(JSBIN_SRCS) $(SYS_CONFIG_C) $(SYS_RO_VARS_C)
	$(call mkspiffs,$(FS_SIZE))

$(ELF_FILE): $(MIOT_OBJS) $(APP_OBJS) $(MBED_DEPS_OBJS) $(BUILD_DIR)/$(STM32LIB) $(PLATFORM_MAKE_FILE)
	$(vecho) "LD $(APP).elf"
	$(Q) $(LD) $(LD_FLAGS) -Wl,--start-group $(MBED_DEPS_OBJS) $(MIOT_OBJS) $(APP_OBJS) -lmbed-lib $(LD_SYS_LIBS) -Wl,--end-group -T $(LD_SCRIPT) $(IPATH) $(LIBRARY_PATHS) --output $@

$(FW_FILE): $(ELF_FILE) $(FW_STAGING_DIR)
	$(vecho) "ELF2BIN $(notdir $(FW_FILE))"
	$(Q) $(ELF2BIN) -O binary $< $(FW_FILE)

$(FS_HEADER) : $(FS_IMG)
	$(vecho) Preparing FS
	$(Q) (cd $(dir $(FS_IMG)) && xxd -i  $(notdir $(FS_IMG)) $(FS_HEADER).tmp && \
	      echo $(FS_ATTRIBUTES) > $(FS_HEADER) && \
		  cat  $(FS_HEADER).tmp >> $(FS_HEADER))

$(FW_MANIFEST): $(FW_FILE) $(FS_HEADER)
