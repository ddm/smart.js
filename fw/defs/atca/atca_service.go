// Code generated by clubbygen.
// GENERATED FILE DO NOT EDIT
// +build !clubby_strict

package atca

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"

	"cesanta.com/clubby"
	"cesanta.com/clubby/endpoint"
	"cesanta.com/clubby/frame"
	"cesanta.com/common/go/ourjson"
	"cesanta.com/common/go/ourtrace"
	"github.com/cesanta/errors"
	"golang.org/x/net/trace"
)

var _ = bytes.MinRead
var _ = fmt.Errorf
var emptyMessage = ourjson.RawMessage{}
var _ = ourtrace.New
var _ = trace.New

const ServiceID = "http://mongoose-iot.com/fw/ATCA"

type GenKeyArgs struct {
	Slot *int64 `json:"slot,omitempty"`
}

type GenKeyResult struct {
	Crc32  *int64  `json:"crc32,omitempty"`
	Pubkey *string `json:"pubkey,omitempty"`
}

type GetConfigResult struct {
	Config *string `json:"config,omitempty"`
	Crc32  *int64  `json:"crc32,omitempty"`
}

type GetPubKeyArgs struct {
	Slot *int64 `json:"slot,omitempty"`
}

type GetPubKeyResult struct {
	Crc32  *int64  `json:"crc32,omitempty"`
	Pubkey *string `json:"pubkey,omitempty"`
}

type LockZoneArgs struct {
	Zone *int64 `json:"zone,omitempty"`
}

type SetConfigArgs struct {
	Config *string `json:"config,omitempty"`
	Crc32  *int64  `json:"crc32,omitempty"`
}

type SetKeyArgs struct {
	Crc32  *int64  `json:"crc32,omitempty"`
	Ecc    *bool   `json:"ecc,omitempty"`
	Key    *string `json:"key,omitempty"`
	Slot   *int64  `json:"slot,omitempty"`
	Wkey   *string `json:"wkey,omitempty"`
	Wkslot *int64  `json:"wkslot,omitempty"`
}

type SignArgs struct {
	Crc32  *int64  `json:"crc32,omitempty"`
	Digest *string `json:"digest,omitempty"`
	Slot   *int64  `json:"slot,omitempty"`
}

type SignResult struct {
	Crc32     *int64  `json:"crc32,omitempty"`
	Signature *string `json:"signature,omitempty"`
}

type Service interface {
	GenKey(ctx context.Context, args *GenKeyArgs) (*GenKeyResult, error)
	GetConfig(ctx context.Context) (*GetConfigResult, error)
	GetPubKey(ctx context.Context, args *GetPubKeyArgs) (*GetPubKeyResult, error)
	LockZone(ctx context.Context, args *LockZoneArgs) error
	SetConfig(ctx context.Context, args *SetConfigArgs) error
	SetKey(ctx context.Context, args *SetKeyArgs) error
	Sign(ctx context.Context, args *SignArgs) (*SignResult, error)
}

type Instance interface {
	Call(context.Context, string, *frame.Command) (*frame.Response, error)
	TraceCall(context.Context, string, *frame.Command) (context.Context, trace.Trace, func(*error))
}

func NewClient(i Instance, addr string) Service {
	return &_Client{i: i, addr: addr}
}

type _Client struct {
	i    Instance
	addr string
}

func (c *_Client) GenKey(pctx context.Context, args *GenKeyArgs) (res *GenKeyResult, err error) {
	cmd := &frame.Command{
		Cmd: "/ATCA.GenKey",
	}
	ctx, tr, finish := c.i.TraceCall(pctx, c.addr, cmd)
	defer finish(&err)
	_ = tr

	tr.LazyPrintf("args: %s", ourjson.LazyJSON(&args))
	cmd.Args = ourjson.DelayMarshaling(args)
	resp, err := c.i.Call(ctx, c.addr, cmd)
	if err != nil {
		return nil, errors.Trace(err)
	}
	if resp.Status != 0 {
		return nil, errors.Trace(&endpoint.ErrorResponse{Status: resp.Status, Msg: resp.StatusMsg})
	}

	tr.LazyPrintf("res: %s", ourjson.LazyJSON(&resp))

	var r *GenKeyResult
	err = resp.Response.UnmarshalInto(&r)
	if err != nil {
		return nil, errors.Annotatef(err, "unmarshaling response")
	}
	return r, nil
}

func (c *_Client) GetConfig(pctx context.Context) (res *GetConfigResult, err error) {
	cmd := &frame.Command{
		Cmd: "/ATCA.GetConfig",
	}
	ctx, tr, finish := c.i.TraceCall(pctx, c.addr, cmd)
	defer finish(&err)
	_ = tr
	resp, err := c.i.Call(ctx, c.addr, cmd)
	if err != nil {
		return nil, errors.Trace(err)
	}
	if resp.Status != 0 {
		return nil, errors.Trace(&endpoint.ErrorResponse{Status: resp.Status, Msg: resp.StatusMsg})
	}

	tr.LazyPrintf("res: %s", ourjson.LazyJSON(&resp))

	var r *GetConfigResult
	err = resp.Response.UnmarshalInto(&r)
	if err != nil {
		return nil, errors.Annotatef(err, "unmarshaling response")
	}
	return r, nil
}

func (c *_Client) GetPubKey(pctx context.Context, args *GetPubKeyArgs) (res *GetPubKeyResult, err error) {
	cmd := &frame.Command{
		Cmd: "/ATCA.GetPubKey",
	}
	ctx, tr, finish := c.i.TraceCall(pctx, c.addr, cmd)
	defer finish(&err)
	_ = tr

	tr.LazyPrintf("args: %s", ourjson.LazyJSON(&args))
	cmd.Args = ourjson.DelayMarshaling(args)
	resp, err := c.i.Call(ctx, c.addr, cmd)
	if err != nil {
		return nil, errors.Trace(err)
	}
	if resp.Status != 0 {
		return nil, errors.Trace(&endpoint.ErrorResponse{Status: resp.Status, Msg: resp.StatusMsg})
	}

	tr.LazyPrintf("res: %s", ourjson.LazyJSON(&resp))

	var r *GetPubKeyResult
	err = resp.Response.UnmarshalInto(&r)
	if err != nil {
		return nil, errors.Annotatef(err, "unmarshaling response")
	}
	return r, nil
}

func (c *_Client) LockZone(pctx context.Context, args *LockZoneArgs) (err error) {
	cmd := &frame.Command{
		Cmd: "/ATCA.LockZone",
	}
	ctx, tr, finish := c.i.TraceCall(pctx, c.addr, cmd)
	defer finish(&err)
	_ = tr

	tr.LazyPrintf("args: %s", ourjson.LazyJSON(&args))
	cmd.Args = ourjson.DelayMarshaling(args)
	resp, err := c.i.Call(ctx, c.addr, cmd)
	if err != nil {
		return errors.Trace(err)
	}
	if resp.Status != 0 {
		return errors.Trace(&endpoint.ErrorResponse{Status: resp.Status, Msg: resp.StatusMsg})
	}
	return nil
}

func (c *_Client) SetConfig(pctx context.Context, args *SetConfigArgs) (err error) {
	cmd := &frame.Command{
		Cmd: "/ATCA.SetConfig",
	}
	ctx, tr, finish := c.i.TraceCall(pctx, c.addr, cmd)
	defer finish(&err)
	_ = tr

	tr.LazyPrintf("args: %s", ourjson.LazyJSON(&args))
	cmd.Args = ourjson.DelayMarshaling(args)
	resp, err := c.i.Call(ctx, c.addr, cmd)
	if err != nil {
		return errors.Trace(err)
	}
	if resp.Status != 0 {
		return errors.Trace(&endpoint.ErrorResponse{Status: resp.Status, Msg: resp.StatusMsg})
	}
	return nil
}

func (c *_Client) SetKey(pctx context.Context, args *SetKeyArgs) (err error) {
	cmd := &frame.Command{
		Cmd: "/ATCA.SetKey",
	}
	ctx, tr, finish := c.i.TraceCall(pctx, c.addr, cmd)
	defer finish(&err)
	_ = tr

	tr.LazyPrintf("args: %s", ourjson.LazyJSON(&args))
	cmd.Args = ourjson.DelayMarshaling(args)
	resp, err := c.i.Call(ctx, c.addr, cmd)
	if err != nil {
		return errors.Trace(err)
	}
	if resp.Status != 0 {
		return errors.Trace(&endpoint.ErrorResponse{Status: resp.Status, Msg: resp.StatusMsg})
	}
	return nil
}

func (c *_Client) Sign(pctx context.Context, args *SignArgs) (res *SignResult, err error) {
	cmd := &frame.Command{
		Cmd: "/ATCA.Sign",
	}
	ctx, tr, finish := c.i.TraceCall(pctx, c.addr, cmd)
	defer finish(&err)
	_ = tr

	tr.LazyPrintf("args: %s", ourjson.LazyJSON(&args))
	cmd.Args = ourjson.DelayMarshaling(args)
	resp, err := c.i.Call(ctx, c.addr, cmd)
	if err != nil {
		return nil, errors.Trace(err)
	}
	if resp.Status != 0 {
		return nil, errors.Trace(&endpoint.ErrorResponse{Status: resp.Status, Msg: resp.StatusMsg})
	}

	tr.LazyPrintf("res: %s", ourjson.LazyJSON(&resp))

	var r *SignResult
	err = resp.Response.UnmarshalInto(&r)
	if err != nil {
		return nil, errors.Annotatef(err, "unmarshaling response")
	}
	return r, nil
}

func RegisterService(i *clubby.Instance, impl Service) error {
	s := &_Server{impl}
	i.RegisterCommandHandler("/ATCA.GenKey", s.GenKey)
	i.RegisterCommandHandler("/ATCA.GetConfig", s.GetConfig)
	i.RegisterCommandHandler("/ATCA.GetPubKey", s.GetPubKey)
	i.RegisterCommandHandler("/ATCA.LockZone", s.LockZone)
	i.RegisterCommandHandler("/ATCA.SetConfig", s.SetConfig)
	i.RegisterCommandHandler("/ATCA.SetKey", s.SetKey)
	i.RegisterCommandHandler("/ATCA.Sign", s.Sign)
	i.RegisterService(ServiceID, _ServiceDefinition)
	return nil
}

type _Server struct {
	impl Service
}

func (s *_Server) GenKey(ctx context.Context, src string, cmd *frame.Command) (interface{}, error) {
	var args GenKeyArgs
	if len(cmd.Args) > 0 {
		if err := cmd.Args.UnmarshalInto(&args); err != nil {
			return nil, errors.Annotatef(err, "unmarshaling args")
		}
	}
	return s.impl.GenKey(ctx, &args)
}

func (s *_Server) GetConfig(ctx context.Context, src string, cmd *frame.Command) (interface{}, error) {
	return s.impl.GetConfig(ctx)
}

func (s *_Server) GetPubKey(ctx context.Context, src string, cmd *frame.Command) (interface{}, error) {
	var args GetPubKeyArgs
	if len(cmd.Args) > 0 {
		if err := cmd.Args.UnmarshalInto(&args); err != nil {
			return nil, errors.Annotatef(err, "unmarshaling args")
		}
	}
	return s.impl.GetPubKey(ctx, &args)
}

func (s *_Server) LockZone(ctx context.Context, src string, cmd *frame.Command) (interface{}, error) {
	var args LockZoneArgs
	if len(cmd.Args) > 0 {
		if err := cmd.Args.UnmarshalInto(&args); err != nil {
			return nil, errors.Annotatef(err, "unmarshaling args")
		}
	}
	return nil, s.impl.LockZone(ctx, &args)
}

func (s *_Server) SetConfig(ctx context.Context, src string, cmd *frame.Command) (interface{}, error) {
	var args SetConfigArgs
	if len(cmd.Args) > 0 {
		if err := cmd.Args.UnmarshalInto(&args); err != nil {
			return nil, errors.Annotatef(err, "unmarshaling args")
		}
	}
	return nil, s.impl.SetConfig(ctx, &args)
}

func (s *_Server) SetKey(ctx context.Context, src string, cmd *frame.Command) (interface{}, error) {
	var args SetKeyArgs
	if len(cmd.Args) > 0 {
		if err := cmd.Args.UnmarshalInto(&args); err != nil {
			return nil, errors.Annotatef(err, "unmarshaling args")
		}
	}
	return nil, s.impl.SetKey(ctx, &args)
}

func (s *_Server) Sign(ctx context.Context, src string, cmd *frame.Command) (interface{}, error) {
	var args SignArgs
	if len(cmd.Args) > 0 {
		if err := cmd.Args.UnmarshalInto(&args); err != nil {
			return nil, errors.Annotatef(err, "unmarshaling args")
		}
	}
	return s.impl.Sign(ctx, &args)
}

var _ServiceDefinition = json.RawMessage([]byte(`{
  "methods": {
    "GenKey": {
      "args": {
        "slot": {
          "doc": "Slot number, 0 to 15",
          "type": "integer"
        }
      },
      "doc": "Generate a new private ECC key in the specified slot",
      "result": {
        "properties": {
          "crc32": {
            "doc": "CRC32 of the public key",
            "type": "integer"
          },
          "pubkey": {
            "doc": "Base64 encoded public key corresponding to the newly generated private key",
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "GetConfig": {
      "doc": "Get device config",
      "result": {
        "properties": {
          "config": {
            "doc": "Base64 encoded contents of the config zone",
            "type": "string"
          },
          "crc32": {
            "doc": "CRC32 of the config data",
            "type": "integer"
          }
        },
        "type": "object"
      }
    },
    "GetPubKey": {
      "args": {
        "slot": {
          "doc": "Slot number, 0 to 15",
          "type": "integer"
        }
      },
      "doc": "Retrieve the public key corresponding to a private key",
      "result": {
        "properties": {
          "crc32": {
            "doc": "CRC32 of the public key",
            "type": "integer"
          },
          "pubkey": {
            "doc": "Base64 encoded public key corresponding to the private key stored in the given slot",
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "LockZone": {
      "args": {
        "zone": {
          "doc": "Idenitifier of the zone to lock. 0 - config, 1 - data",
          "type": "integer"
        }
      },
      "doc": "Lock the specified zone"
    },
    "SetConfig": {
      "args": {
        "config": {
          "doc": "Base64 encoded contents of the config zone",
          "type": "string"
        },
        "crc32": {
          "doc": "CRC32 of the config data",
          "type": "integer"
        }
      },
      "doc": "Set device config"
    },
    "SetKey": {
      "args": {
        "crc32": {
          "doc": "CRC32 of the key",
          "type": "integer"
        },
        "ecc": {
          "doc": "Whether key is a ECC private key or not",
          "type": "boolean"
        },
        "key": {
          "doc": "Base64 encoded key",
          "type": "string"
        },
        "slot": {
          "doc": "Slot number, 0 to 15",
          "type": "integer"
        },
        "wkey": {
          "doc": "Base64 encoded write key",
          "type": "string"
        },
        "wkslot": {
          "doc": "CRC32 of the key",
          "type": "integer"
        }
      },
      "doc": "Set key in the specified slot, ECC or symmetric"
    },
    "Sign": {
      "args": {
        "crc32": {
          "doc": "CRC32 of the digest",
          "type": "integer"
        },
        "digest": {
          "doc": "Base64 encoded digest to sign. Must be 32 bytes.",
          "type": "string"
        },
        "slot": {
          "doc": "Slot number, 0 to 7",
          "type": "integer"
        }
      },
      "doc": "Sign a 32-byte digest with a private ECC key",
      "result": {
        "properties": {
          "crc32": {
            "doc": "CRC32 of the signature",
            "type": "integer"
          },
          "signature": {
            "doc": "Base64 encoded signature",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "name": "/ATCA",
  "namespace": "http://mongoose-iot.com/fw"
}`))
